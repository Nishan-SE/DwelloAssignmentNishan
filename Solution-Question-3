
public static int maxTokens(int friends_nodes, int[] friends_from, int[] friends_to, int[] friends_weight) throws IOException {

        System.out.println("Return an integer denoting the maximal product of xi and yi such that xi and yi are a pair of friends that share the maximal number of tokens with each other.");
        System.out.println();

        //2 ≤ friends_nodes ≤ 100
        if (friends_nodes < 2 || friends_nodes > 100) {
            throw new IOException("Invalid input");
        }

        //1 ≤ friends_edges ≤ min(200, (friends_nodes × (friends_nodes − 1)) / 2)
        if (friends_from.length < 1 || friends_from.length > min(200, (friends_nodes * (friends_nodes - 1)) / 2)) {
            throw new IOException("Invalid input");
        }

        //1 ≤ friends_weighti ≤ 100
        //1 ≤ friends_fromi, friends_toi ≤ friends_nodes
        //1≤ friends_weighti ≤ friends_edges
        //friends_fromi ≠ friends_toi
        for (int i = 0; i < friends_weight.length; i++) {
            if (friends_weight[i] < 1 || friends_weight[i] > 100 || friends_from[i] < 1 || friends_from[i] > friends_nodes || friends_to[i] < 1 || friends_to[i] > friends_nodes || friends_weight[i] < 1 || friends_weight[i] > friends_weight.length || friends_from[i] == friends_to[i])
                throw new IOException("Invalid input");
        }

        HashMap<Integer, HashSet<Integer>> friends_tokens = new HashMap();
        HashMap<Integer, HashSet<Integer>> tokens_friends = new HashMap();

        HashMap<Map.Entry<Integer, Integer>, Integer> pairs_tokencount = new HashMap();


        for (int i = 0; i < friends_from.length; i++) {
            HashSet<Integer> from_friends = friends_tokens.get(friends_from[i]);
            if (from_friends == null)
                from_friends = new HashSet<Integer>();
            from_friends.add(friends_weight[i]);
            HashSet<Integer> to_friends = friends_tokens.get(friends_to[i]);
            if (to_friends == null)
                to_friends = new HashSet<Integer>();
            to_friends.add(friends_weight[i]);

            friends_tokens.put(friends_from[i], from_friends);
            friends_tokens.put(friends_to[i], to_friends);

            HashSet<Integer> tokens = tokens_friends.get(friends_weight[i]);
            if (tokens == null)
                tokens = new HashSet<Integer>();
            tokens.add(friends_from[i]);
            tokens.add(friends_to[i]);
            tokens_friends.put(friends_weight[i], tokens);
        }

        System.out.println("friends_tokens:" + friends_tokens.toString());
        System.out.println("tokens_friends:" + tokens_friends.toString());

        for (int i = 1; i <= friends_nodes; i++) {
            for (int j = 1; j <= friends_nodes; j++) {
                if (i == j)
                    continue;
                int numberOfTokensForThisPair = 0;
                if (friends_tokens.containsKey(i)) {
                    for (Integer token : friends_tokens.get(i)) {
                        if (tokens_friends.containsKey(token)) {
                            if (tokens_friends.get(token).contains(j))
                                numberOfTokensForThisPair++;
                        }
                    }
                    pairs_tokencount.put(new AbstractMap.SimpleEntry(i, j), numberOfTokensForThisPair);
                }
            }
        }

        int maxTokens = 0;
        int maxProduct = 0;

        for (Map.Entry<Map.Entry<Integer, Integer>, Integer> entry : pairs_tokencount.entrySet()) {
            if (entry.getValue() >= maxTokens) {
                maxTokens = entry.getValue();
                Map.Entry<Integer, Integer> pair = entry.getKey();
                int product = pair.getKey() * pair.getValue();
                if (product >= maxProduct) {
                    System.out.println("maxProduct " + maxProduct + ". Pair (" + pair.getKey() + ", " + pair.getValue() + ") shares " + entry.getValue() + " tokens. Product " + product);
                    maxProduct = product;
                }
            }
        }

        System.out.println("return maxProduct: " + maxProduct);
        return maxProduct;
    }
}

